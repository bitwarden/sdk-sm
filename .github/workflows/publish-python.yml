name: Publish Python SDK
run-name: Publish Python SDK ${{ inputs.release_type }}

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: "Release Options"
        required: true
        default: "Release"
        type: choice
        options:
          - Release
          - Dry Run
      version:
        description: "Release Version"
        required: false
        default: "latest"

defaults:
  run:
    shell: bash

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-22.04
    permissions:
      contents: read
    outputs:
      version: ${{ steps.version-output.outputs.version }}
      tag_name: ${{ steps.version-output.outputs.tag_name }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Branch check
        if: ${{ inputs.release_type != 'Dry Run' }}
        run: |
          if [[ "$GITHUB_REF" != "refs/heads/main" ]]; then
            echo "==================================="
            echo "[!] Can only release from the 'main' branch"
            echo "==================================="
            exit 1
          fi

      - name: Version output
        id: version-output
        run: |
          if [[ "${{ inputs.version }}" == "latest" || "${{ inputs.version }}" == "" ]]; then
            TAG_NAME=$(curl  "https://api.github.com/repos/bitwarden/sdk-sm/releases" | jq -c '.[] | select(.tag_name | contains("python")) | .tag_name' | head -1)
            VERSION=$(echo $TAG_NAME | grep -ohE '20[0-9]{2}\.([1-9]|1[0-2])\.[0-9]+')
            echo "Latest Released Version: $VERSION"
            echo "version=$VERSION" >> $GITHUB_OUTPUT

            echo "Latest Released Tag name: $TAG_NAME"
            echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          else
            echo "Release Version: ${{ inputs.version }}"
            echo "version=${{ inputs.version }}" >> $GITHUB_OUTPUT
          fi

  publish:
    name: Publish
    runs-on: ubuntu-22.04
    needs: setup
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ needs.setup.outputs.tag_name }}

      - name: Install Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: "3.9"

      - name: Install twine
        run: pip install twine

      - name: Get release assets
        working-directory: ${{ github.workspace }}/target/wheels/dist
        run: |
          ARTIFACT_URLS=$(curl -sSL https://api.github.com/repos/bitwarden/sdk-sm/releases/tags/${{ needs.setup.outputs.tag_name }} | jq -r '.assets[].browser_download_url')
          for url in $ARTIFACT_URLS; do
            wget $url
          done

      - name: Unpack release assets
        working-directory: ${{ github.workspace }}/target/wheels/dist
        run: |
          for file in *.zip; do
            unzip $file
          done

      - name: Move files
        working-directory: ${{ github.workspace }}/target/wheels/dist
        run: |
          find . -maxdepth 2 -type f -print0 | xargs -0 mv -t .
          rm -rf */

      - name: Log in to Azure
        uses: bitwarden/gh-actions/azure-login@main
        with:
          subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          client_id: ${{ secrets.AZURE_CLIENT_ID }}

      - name: Retrieve pypi api token
        id: retrieve-secret
        uses: bitwarden/gh-actions/get-keyvault-secrets@main
        with:
          keyvault: "bitwarden-ci"
          secrets: "pypi-api-token,
            pypi-test-api-token"

      - name: Log out from Azure
        uses: bitwarden/gh-actions/azure-logout@main

      - name: Check
        working-directory: ${{ github.workspace }}/target/wheels
        run: twine check dist/*

      - name: Publish
        if: ${{ inputs.release_type != 'Dry Run' }}
        working-directory: ${{ github.workspace }}/target/wheels
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ steps.retrieve-secret.outputs.pypi-api-token }}
        run: twine upload --repository pypi dist/*

      - name: Dry Run - Publish
        if: ${{ inputs.release_type == 'Dry Run' }}
        working-directory: ${{ github.workspace }}/target/wheels
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ steps.retrieve-secret.outputs.pypi-test-api-token }}
        run: twine upload --repository testpypi dist/*
