name: Build and Publish Python Wheels (Dev)

on:
  push:
    branches:
      - "main"
  workflow_dispatch:

  pull_request: # TESTING ONLY - to be deleted before merge

concurrency:
  group: build-python-dev
  cancel-in-progress: false

env:
  _TARGET_DIR: target/wheels/dist

jobs:
  build-dev:
    name: Build Dev
    uses: ./.github/workflows/build-python-wheels.yml
    permissions:
      contents: read
    with:
      dev_version: true

  publish-dev:
    name: Publish Dev
    environment: "Bitwarden SDK Python - Dev"
    runs-on: ubuntu-24.04
    needs: build-dev
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Get workflow run assets
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RUN_ID: ${{ github.run_id }}
        run: |
          gh run download "$RUN_ID" --repo "$GITHUB_REPOSITORY" --pattern "bitwarden_sdk-*.dev*"
          mkdir -p "$_TARGET_DIR"
          shopt -s globstar
          mv **/*.whl "$_TARGET_DIR"
          find "$_TARGET_DIR" -type f

      - name: Publish dev package to Test PyPI
        # if: github.event_name == 'push' && github.ref == 'refs/heads/main' # TODO put this back in before final merge
        uses: pypa/gh-action-pypi-publish@ed0c53931b1dc9bd32cbe73a98c7f6766f8a527e # v1.13.0
        with:
          repository-url: https://test.pypi.org/legacy/
          packages-dir: ${{ env._TARGET_DIR }}
          verify-metadata: true # Runs twine check before upload

  validate:
    name: Validate Dev
    runs-on: ubuntu-24.04
    needs:
      - build-dev
      - publish-dev
    permissions: {}
    env:
      _EXPECTED_VERSION: ${{ needs.build-dev.outputs.package_version }}
    steps:
      - name: Create and activate virtual environment
        run: |
          python3 -m venv venv
          source venv/bin/activate

      - name: Install dev package from Test PyPI
        run: |
          pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple bitwarden-sdk --pre

      - name: Validate from pip
        run: |
          pip show bitwarden-sdk

          installed_version=$(pip show bitwarden-sdk | grep Version | awk '{print $2}')
          echo "Installed version: $installed_version"
          if [ "$installed_version" != "$_EXPECTED_VERSION" ]; then
            echo "==================================="
            echo "[!] Installed version ($installed_version) does not match expected version ($_EXPECTED_VERSION)"
            echo "==================================="
            exit 1
          fi

      - name: Validate code version
        run: |
          echo "Python package version:"
          python -c "import bitwarden_sdk; print(bitwarden_sdk.__version__)"

          package_version=$(python -c "import bitwarden_sdk; print(bitwarden_sdk.__version__)")
          if [ "$package_version" != "$_EXPECTED_VERSION" ]; then
            echo "==================================="
            echo "[!] Package version ($package_version) does not match expected version ($_EXPECTED_VERSION)"
            echo "==================================="
            exit 1
          fi

