name: Publish Python SDK
run-name: Publish Python SDK - ${{ inputs.release_type }}

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: "Release Options"
        required: true
        default: "Release"
        type: choice
        options:
          - Release
          - Dry Run
      version:
        description: "Release Version (default: latest)"
        required: false
        default: "latest"
  workflow_call:
    inputs:
      release_type:
        description: "Release Options"
        required: false
        type: string
        default: "Dev Release"

defaults:
  run:
    shell: bash

env:
  _TARGET_DIR: target/wheels/dist

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-22.04
    permissions:
      contents: read
    outputs:
      version: ${{ steps.version-output.outputs.version }}
      tag_name: ${{ steps.version-output.outputs.tag_name }}
    steps:
      - name: Log inputs to job summary
        run: |
          echo "<details><summary>Job Inputs</summary>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          echo '${{ toJson(inputs) }}' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "</details>" >> $GITHUB_STEP_SUMMARY

      - name: Checkout repo
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Branch check
        if: ${{ inputs.release_type != 'Dry Run' }}
        run: |
          if [[ "$GITHUB_REF" != "refs/heads/main" ]]; then
            echo "==================================="
            echo "[!] Can only release from the 'main' branch"
            echo "==================================="
            exit 1
          fi

      - name: Version output
        id: version-output
        if: ${{ inputs.release_type != 'Dev Release' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_PREFIX: python
          INPUT_VERSION: ${{ inputs.version }}
        run: |
          if [[ "$INPUT_VERSION" == "latest" ]]; then
            TAG_NAME=$(gh release list --json tagName --jq ".[].tagName | select(startswith(\"$TAG_PREFIX\"))" --limit 100 --order desc | head -n 1)
          else
            TAG_NAME=$(gh release list --json tagName --jq ".[].tagName | select(. == \"$TAG_PREFIX-v$INPUT_VERSION\")" --limit 100 | head -n 1)
            echo "version=$INPUT_VERSION" >> $GITHUB_OUTPUT
          fi

          echo "Found Tag Name: '$TAG_NAME' for version: '$INPUT_VERSION'"

          if [ -z "$TAG_NAME" ]; then
            echo "Unable to find tag for version: $INPUT_VERSION"
            exit 1
          fi
          VERSION=$(echo "$TAG_NAME" | grep -ohE '[0-9]+\.[0-9]+\.[0-9]+')
          echo "Latest Tag Name: $TAG_NAME"
          echo "Latest Released Version: $VERSION"
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  publish:
    name: Publish
    runs-on: ubuntu-24.04
    needs: setup
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Get release assets
        working-directory: ${{ env._TARGET_DIR }}
        if: ${{ inputs.release_type != 'Dev Release' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_NAME: ${{ needs.setup.outputs.tag_name }}
          VERSION: ${{ needs.setup.outputs.version }}
        run: |
          gh release download $TAG_NAME --pattern "bitwarden_sdk-${VERSION}-*.whl"
          ls -la

      - name: Get workflow run assets
        working-directory: ${{ env._TARGET_DIR }}
        if: ${{ inputs.release_type == 'Dev Release' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RUN_ID: ${{ github.run_id }}
        run: |
          gh run download "$RUN_ID" --pattern "bitwarden_sdk-*.dev*.whl"
          ls -la

      - name: Publish dev package to Test PyPI
        uses: pypa/gh-action-pypi-publish@ed0c53931b1dc9bd32cbe73a98c7f6766f8a527e # v1.13.0
        if: ${{ inputs.release_type == 'Dev Release'}}
        with:
          repository-url: https://test.pypi.org/legacy/
          packages-dir: ${{ env._TARGET_DIR }}
          verify-metadata: true # Runs twine check before upload

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@ed0c53931b1dc9bd32cbe73a98c7f6766f8a527e # v1.13.0
        if: ${{ inputs.release_type == 'Release' }}
        with:
          packages-dir: ${{ env._TARGET_DIR }}
          verify-metadata: true # Runs twine check before upload
