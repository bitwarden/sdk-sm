name: Publish Ruby SDK
run-name: Publish Ruby SDK ${{ inputs.release_type }}

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: "Release Options"
        required: true
        default: "Release"
        type: choice
        options:
          - Release
          - Dry Run
      version:
        description: "Release Version"
        required: false
        default: "latest"

permissions:
  contents: read
  id-token: write

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-22.04
    outputs:
      release_version: ${{ steps.version-output.outputs.version }}
      tag_name: ${{ steps.version-output.outputs.tag_name }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: Branch check
        if: ${{ inputs.release_type != 'Dry Run' }}
        run: |
          if [[ "$GITHUB_REF" != "refs/heads/main" ]]; then
            echo "==================================="
            echo "[!] Can only release from the 'main' branch"
            echo "==================================="
            exit 1
          fi

      - name: Version output
        id: version-output
        env:
          VERSION: ${{ inputs.version }}
        run: |
          if [[ "${VERSION}" == "latest" || "${VERSION}" == "" ]]; then
            TAG_NAME=$(curl  "https://api.github.com/repos/bitwarden/sdk-sm/releases" | jq -c '.[] | select(.tag_name | contains("ruby")) | .tag_name' | head -1)
            VERSION=$(echo "$TAG_NAME" | grep -ohE '20[0-9]{2}\.([1-9]|1[0-2])\.[0-9]+')
            echo "Latest Released Version: $VERSION"
            echo "version=$VERSION" >> "$GITHUB_OUTPUT"

            echo "Latest Released Tag name: $TAG_NAME"
            echo "tag_name=$TAG_NAME" >> "$GITHUB_OUTPUT"
          else
            echo "Release Version: ${VERSION}"
            echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
          fi

  publish:
    name: Publish
    runs-on: ubuntu-22.04
    needs: setup
    env:
      _VERSION: ${{ needs.setup.outputs.release_version }}
      _TAG_NAME: ${{ needs.setup.outputs.tag_name }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: ${{ env._TAG_NAME }}
          persist-credentials: false

      - name: Create GitHub deployment
        if: ${{ inputs.release_type != 'Dry Run' }}
        uses: chrnorm/deployment-action@55729fcebec3d284f60f5bcabbd8376437d696b1 # v2.0.7
        id: deployment
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          initial-status: "in_progress"
          environment: "Bitwarden Ruby SDK - Production"
          description: "Deployment ${{ env._VERSION }} from branch ${{ github.ref_name }}"
          task: release

      - name: Log in to Azure
        uses: bitwarden/gh-actions/azure-login@main
        with:
          subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          client_id: ${{ secrets.AZURE_CLIENT_ID }}

      - name: Retrieve secrets
        id: retrieve-secrets
        uses: bitwarden/gh-actions/get-keyvault-secrets@main
        with:
          keyvault: "bitwarden-ci"
          secrets: "rubygem-api-key"

      - name: Log out from Azure
        uses: bitwarden/gh-actions/azure-logout@main

      - name: Download ruby artifact
        run: wget "https://github.com/bitwarden/sdk-sm/releases/download/ruby-v${_VERSION}/bitwarden-sdk-secrets-${_VERSION}.gem"

      - name: Push gem to Rubygems
        if: ${{ inputs.release_type != 'Dry Run' }}
        run: |
          mkdir -p "$HOME/.gem"
          touch "$HOME/.gem/credentials"
          chmod 0600 "$HOME/.gem/credentials"
          printf -- "---\n:rubygems_api_key: %s\n" "$GEM_HOST_API_KEY" > "$HOME/.gem/credentials"
          gem push ./*.gem
        env:
          GEM_HOST_API_KEY: ${{ steps.retrieve-secrets.outputs.rubygem-api-key }}
        working-directory: languages/ruby/bitwarden_sdk_secrets

      - name: Update deployment status to Success
        if: ${{ inputs.release_type != 'Dry Run' && success() }}
        uses: chrnorm/deployment-status@9a72af4586197112e0491ea843682b5dc280d806 # v2.0.3
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          state: "success"
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}

      - name: Update deployment status to Failure
        if: ${{ inputs.release_type != 'Dry Run' && failure() }}
        uses: chrnorm/deployment-status@9a72af4586197112e0491ea843682b5dc280d806 # v2.0.3
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          state: "failure"
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
